{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;sBAAc,QAAQ;;;;wBACF,UAAU;;;;wBACR,WAAW;;iCACP,sBAAsB;;AAEhD,SAAS,UAAU,CAAC,IAAI,EAAE;;;;;AAKxB,MAAI,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,CAAA;AAClC,MAAI,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;;AAGlC,SAAO,UAAA,KAAK,EAAI;AACd,QAAI,GAAG,GAAG,KAAK,CAAC,SAAS,CACvB,KAAK,CAAC,IAAI,EACV;AACE,cAAQ,EAAE,KAAK,CAAC,IAAI;AACpB,iBAAS,IAAI,CAAC,OAAO;AACrB,gBAAU,EAAE,IAAI;KACjB,CACF,CAAA;;AAED,OAAG,CAAC,GAAG,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;;AAEpC,WAAO,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAA;GACxC,CAAA;CACF;;AAED,SAAS,UAAU,CAAC,QAAQ,EAAE;;AAE5B,SAAO,UAAA,KAAK,EAAI;AACd,QAAI,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;AACnD,aAAO,KAAK,CAAA;KACb;;AAGD,QAAI,KAAK,CAAC,QAAQ,KAAK,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,EAAE;AACvD,aAAO,KAAK,CAAA;KACb;;AAED,WAAO,QAAQ,CAAC,oBAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAW,EAAK;UAAf,IAAI,GAAL,IAAW,CAAV,IAAI;UAAE,GAAG,GAAV,IAAW,CAAJ,GAAG;;AAC9G,WAAK,CAAC,IAAI,GAAG,IAAI,CAAA;;AAEjB,UAAI,GAAG,EAAE;AACP,aAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAA;OAC1B;;AAED,WAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA;AAC5B,aAAO,KAAK,CAAA;KACb,CAAC,CAAA;GACH,CAAA;CACF;;AAED,IAAI,UAAU,CAAA;;qBAEC,UAAS,EAAE,EAAa;MAAX,IAAI,yDAAG,EAAE;;AACnC,MAAI,CAAE,UAAU,EACd,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,EAAC,EAAE,IAAI,CAAC,CAAC,CAAA;;AAEzF,SAAO,kCAAU,EAAE,CAAC,MAAM,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC,CAAA;CACpD","file":"src/index.js","sourcesContent":["import _ from 'lodash'\nimport Promise from 'bluebird'\nimport { Bacon } from 'sigh-core'\nimport { mapEvents } from 'sigh-core/lib/stream'\n\nfunction babel6Task(opts) {\n  // this function is called once for each subprocess in order to cache state,\n  // it is not a closure and does not have access to the surrounding state, use\n  // `require` to include any modules you need, for further info see\n  // https://github.com/ohjames/process-pool\n  var log = require('sigh-core').log\n  var babel = require('babel-core');\n\n  // this task runs inside the subprocess to transform each event\n  return event => {\n    var res = babel.transform(\n      event.data,\n      {\n        filename: event.path,\n        extends: opts.babelrc,\n        sourceMaps: true\n      }\n    )\n\n    res.map.sources = [event.sourcePath]\n\n    return { code: res.code, map: res.map }\n  }\n}\n\nfunction adaptEvent(compiler) {\n  // data sent to/received from the subprocess has to be serialised/deserialised\n  return event => {\n    if (event.type !== 'add' && event.type !== 'change') {\n      return event\n    }\n\n\n    if (event.fileType !== 'jsx' && event.fileType !== 'js') {\n      return event\n    }\n\n    return compiler(_.pick(event, 'type', 'data', 'path', 'projectPath', 'basePath', 'sourcePath')).then(({code, map}) => {\n      event.data = code\n\n      if (map) {\n        event.applySourceMap(map)\n      }\n\n      event.changeFileSuffix('js')\n      return event\n    })\n  }\n}\n\nvar pooledProc\n\nexport default function(op, opts = {}) {\n  if (! pooledProc)\n    pooledProc = op.procPool.prepare(babel6Task, Object.assign({cwd: process.cwd()}, opts))\n\n  return mapEvents(op.stream, adaptEvent(pooledProc))\n}\n"]}